@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@{
    var selectedState = Context.Request.Query["state"].ToString()?.ToUpperInvariant();
    var policies = Model.Children().Where(x => x.ContentType.Alias == "policyCard");
}

<div class="category-page-container">

    <div class="policy-tab-header">
        <div class="state-selector-wrapper">
            <label for="state"><strong>Choose your work state:</strong></label>
            <select class="state-selector" id="state" name="state">
                <option value="">--Select a State--</option>
                <option value="CA" selected="@(selectedState == "CA" ? "selected" : null)">California</option>
                <option value="IL" selected="@(selectedState == "IL" ? "selected" : null)">Illinois</option>
            </select>
        </div>
    </div>


    <section class="category-header">
        <h1>@Model.Name</h1>
        @if (Model.HasValue("categoryDescription"))
        {
            <p>@Model.Value("categoryDescription")</p>
        }
    </section>

    @if (policies != null && policies.Any())
    {
        <div class="policy-grid">
            @foreach (var policy in policies)
            {
                var showOverlay = !string.IsNullOrEmpty(selectedState) &&
                policy.Value<IEnumerable<IPublishedElement>>("stateOverlays")
                ?.Any(overlay => overlay.Value<string>("stateCode")?.ToUpper() == selectedState) == true;

                var overlay = showOverlay
                ? policy.Value<IEnumerable<IPublishedElement>>("stateOverlays")
                ?.FirstOrDefault(overlay => overlay.Value<string>("stateCode")?.ToUpper() == selectedState)
                : null;

                @await Html.PartialAsync("blocklist/PolicyCard", policy)
            }

        </div>
    }
    else
    {
        <p class="text-center mt-2">There are no policies assigned to this category.</p>
    }
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        // SPA: "Back to All Categories" button
        var backBtn = document.getElementById("back-to-categories-btn");
        if (backBtn) {
            backBtn.addEventListener("click", function () {
                // Hide the current category and show the grid (handled by tabbed-navigation.js)
                var categoryContent = parent.document.getElementById("policies-category-content");
                var categoryGrid = parent.document.getElementById("category-grid");
                if (categoryContent) categoryContent.style.display = "none";
                if (categoryGrid) categoryGrid.style.display = "grid";
                // Optionally: clear loaded content
            });
        }

        // SPA: State selector (no page reload)
        var stateSelect = document.getElementById("state");
        if (stateSelect) {
            stateSelect.addEventListener("change", function () {
                var newState = stateSelect.value;
                var categoryId = '@Model.Id';
                // AJAX request for this category and new state
                fetch(`/umbraco/api/policies/getcategory?categoryId=${categoryId}&state=${newState}`)
                    .then(response => response.text())
                    .then(html => {
                        // Replace the category content (this whole container)
                        var container = parent.document.getElementById("policies-category-content");
                        if (container) container.innerHTML = html;
                    });
                // Optionally: animate/highlight the selector (see previous CSS for .animated)
                var stickySelector = document.querySelector('.sticky-state-selector');
                if (stickySelector) {
                    stickySelector.classList.add('animated');
                    setTimeout(function () {
                        stickySelector.classList.remove('animated');
                    }, 1300);
                }
            });
        }
    });
</script>
