@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage

@{
    var selectedState = Context.Request.Query["state"].ToString()?.ToUpperInvariant();
    var policies = Model.Children().Where(x => x.ContentType.Alias == "policyCard");
}

<div class="category-page-container" data-category-id="@Model.Id">

    <div class="policy-tab-header">
        <div class="state-selector-wrapper" style="margin-bottom: 1rem;">
            <div id="current-state-label" style="display: none;">
                <strong>Current Work State:</strong>
                <span id="current-state-name">
                    @(selectedState == "CA" ? "California" : selectedState == "IL" ? "Illinois" : "All Locations")
                </span>
                <button type="button" id="change-state-btn" style="margin-left: 8px; background: none; border: none; color: blue; text-decoration: underline; cursor: pointer;">(Change)</button>
            </div>

            <form id="state-select-form" style="display: block;">
                <label for="state"><strong>Choose Your Work State:</strong></label>
                <select id="state" name="state" class="state-selector">
                    <option value="" selected="@(string.IsNullOrEmpty(selectedState))">All Locations</option>
                    <option value="CA" selected="@(selectedState == "CA")">California</option>
                    <option value="IL" selected="@(selectedState == "IL")">Illinois</option>
                </select>
            </form>
        </div>

        <div id="state-change-feedback" class="state-feedback" style="display: none; color: green; font-size: 0.9rem; margin-top: 4px;"></div>
    </div>

    <section class="category-header">
        <h1>@Model.Name</h1>
        @if (Model.HasValue("categoryDescription"))
        {
            <p>@Model.Value("categoryDescription")</p>
        }
    </section>

    @if (policies != null && policies.Any())
    {
        <div class="policy-grid">
            @foreach (var policy in policies)
            {
                var showOverlay = !string.IsNullOrEmpty(selectedState) &&
                policy.Value<IEnumerable<IPublishedElement>>("stateOverlays")
                ?.Any(overlay => overlay.Value<string>("stateCode")?.ToUpper() == selectedState) == true;

                var overlay = showOverlay
                ? policy.Value<IEnumerable<IPublishedElement>>("stateOverlays")
                ?.FirstOrDefault(overlay => overlay.Value<string>("stateCode")?.ToUpper() == selectedState)
                : null;

                @await Html.PartialAsync("blocklist/PolicyCard", policy)
            }
        </div>
    }
    else
    {
        <p class="text-center mt-2">There are no policies assigned to this category.</p>
    }
</div>
